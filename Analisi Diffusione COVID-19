{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNFa4acUygkJh+EHe/EnVOq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/6Luciel6/epicode-/blob/main/Analisi%20Diffusione%20COVID-19\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()  # Carica un file dal tuo computer\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "int0bWXeXYHs",
        "outputId": "e284772c-d309-4d76-f016-cc790b65eb12"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-270983ad-aea3-40b1-b474-dbe1a450b3df\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-270983ad-aea3-40b1-b474-dbe1a450b3df\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving owid-covid-data.csv to owid-covid-data.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "# Sostituisci 'owid-covid-data.csv' con il nome del file caricato\n",
        "df = pd.read_csv(\"owid-covid-data.csv\")\n"
      ],
      "metadata": {
        "id": "IQnAwh4WtFuu"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Dimensioni del dataset:\", df.shape)  # Restituisce (righe, colonne)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aKJ_czcDtQyU",
        "outputId": "d58eb57e-a768-480d-b599-24be4cd65058"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dimensioni del dataset: (429435, 67)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.info())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L-dPY2jctTxN",
        "outputId": "6cf98047-6925-4106-e30b-5cb72cf9db23"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 429435 entries, 0 to 429434\n",
            "Data columns (total 67 columns):\n",
            " #   Column                                      Non-Null Count   Dtype  \n",
            "---  ------                                      --------------   -----  \n",
            " 0   iso_code                                    429435 non-null  object \n",
            " 1   continent                                   402910 non-null  object \n",
            " 2   location                                    429435 non-null  object \n",
            " 3   date                                        429435 non-null  object \n",
            " 4   total_cases                                 411804 non-null  float64\n",
            " 5   new_cases                                   410159 non-null  float64\n",
            " 6   new_cases_smoothed                          408929 non-null  float64\n",
            " 7   total_deaths                                411804 non-null  float64\n",
            " 8   new_deaths                                  410608 non-null  float64\n",
            " 9   new_deaths_smoothed                         409378 non-null  float64\n",
            " 10  total_cases_per_million                     411804 non-null  float64\n",
            " 11  new_cases_per_million                       410159 non-null  float64\n",
            " 12  new_cases_smoothed_per_million              408929 non-null  float64\n",
            " 13  total_deaths_per_million                    411804 non-null  float64\n",
            " 14  new_deaths_per_million                      410608 non-null  float64\n",
            " 15  new_deaths_smoothed_per_million             409378 non-null  float64\n",
            " 16  reproduction_rate                           184817 non-null  float64\n",
            " 17  icu_patients                                39116 non-null   float64\n",
            " 18  icu_patients_per_million                    39116 non-null   float64\n",
            " 19  hosp_patients                               40656 non-null   float64\n",
            " 20  hosp_patients_per_million                   40656 non-null   float64\n",
            " 21  weekly_icu_admissions                       10993 non-null   float64\n",
            " 22  weekly_icu_admissions_per_million           10993 non-null   float64\n",
            " 23  weekly_hosp_admissions                      24497 non-null   float64\n",
            " 24  weekly_hosp_admissions_per_million          24497 non-null   float64\n",
            " 25  total_tests                                 79387 non-null   float64\n",
            " 26  new_tests                                   75403 non-null   float64\n",
            " 27  total_tests_per_thousand                    79387 non-null   float64\n",
            " 28  new_tests_per_thousand                      75403 non-null   float64\n",
            " 29  new_tests_smoothed                          103965 non-null  float64\n",
            " 30  new_tests_smoothed_per_thousand             103965 non-null  float64\n",
            " 31  positive_rate                               95927 non-null   float64\n",
            " 32  tests_per_case                              94348 non-null   float64\n",
            " 33  tests_units                                 106788 non-null  object \n",
            " 34  total_vaccinations                          85417 non-null   float64\n",
            " 35  people_vaccinated                           81132 non-null   float64\n",
            " 36  people_fully_vaccinated                     78061 non-null   float64\n",
            " 37  total_boosters                              53600 non-null   float64\n",
            " 38  new_vaccinations                            70971 non-null   float64\n",
            " 39  new_vaccinations_smoothed                   195029 non-null  float64\n",
            " 40  total_vaccinations_per_hundred              85417 non-null   float64\n",
            " 41  people_vaccinated_per_hundred               81132 non-null   float64\n",
            " 42  people_fully_vaccinated_per_hundred         78061 non-null   float64\n",
            " 43  total_boosters_per_hundred                  53600 non-null   float64\n",
            " 44  new_vaccinations_smoothed_per_million       195029 non-null  float64\n",
            " 45  new_people_vaccinated_smoothed              192177 non-null  float64\n",
            " 46  new_people_vaccinated_smoothed_per_hundred  192177 non-null  float64\n",
            " 47  stringency_index                            196190 non-null  float64\n",
            " 48  population_density                          360492 non-null  float64\n",
            " 49  median_age                                  334663 non-null  float64\n",
            " 50  aged_65_older                               323270 non-null  float64\n",
            " 51  aged_70_older                               331315 non-null  float64\n",
            " 52  gdp_per_capita                              328292 non-null  float64\n",
            " 53  extreme_poverty                             211996 non-null  float64\n",
            " 54  cardiovasc_death_rate                       328865 non-null  float64\n",
            " 55  diabetes_prevalence                         345911 non-null  float64\n",
            " 56  female_smokers                              247165 non-null  float64\n",
            " 57  male_smokers                                243817 non-null  float64\n",
            " 58  handwashing_facilities                      161741 non-null  float64\n",
            " 59  hospital_beds_per_thousand                  290689 non-null  float64\n",
            " 60  life_expectancy                             390299 non-null  float64\n",
            " 61  human_development_index                     319127 non-null  float64\n",
            " 62  population                                  429435 non-null  int64  \n",
            " 63  excess_mortality_cumulative_absolute        13411 non-null   float64\n",
            " 64  excess_mortality_cumulative                 13411 non-null   float64\n",
            " 65  excess_mortality                            13411 non-null   float64\n",
            " 66  excess_mortality_cumulative_per_million     13411 non-null   float64\n",
            "dtypes: float64(61), int64(1), object(5)\n",
            "memory usage: 219.5+ MB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Caricare il dataset\n",
        "df = pd.read_csv(\"owid-covid-data.csv\")\n"
      ],
      "metadata": {
        "id": "_HZVdaKXt9tx"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.columns)  # Lista delle colonne\n",
        "print(df.head())   # Anteprima dei dati\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xZkJE8vuAet",
        "outputId": "7bc01b3b-e94c-4877-a51a-89adf6cf74d7"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['iso_code', 'continent', 'location', 'date', 'total_cases', 'new_cases',\n",
            "       'new_cases_smoothed', 'total_deaths', 'new_deaths',\n",
            "       'new_deaths_smoothed', 'total_cases_per_million',\n",
            "       'new_cases_per_million', 'new_cases_smoothed_per_million',\n",
            "       'total_deaths_per_million', 'new_deaths_per_million',\n",
            "       'new_deaths_smoothed_per_million', 'reproduction_rate', 'icu_patients',\n",
            "       'icu_patients_per_million', 'hosp_patients',\n",
            "       'hosp_patients_per_million', 'weekly_icu_admissions',\n",
            "       'weekly_icu_admissions_per_million', 'weekly_hosp_admissions',\n",
            "       'weekly_hosp_admissions_per_million', 'total_tests', 'new_tests',\n",
            "       'total_tests_per_thousand', 'new_tests_per_thousand',\n",
            "       'new_tests_smoothed', 'new_tests_smoothed_per_thousand',\n",
            "       'positive_rate', 'tests_per_case', 'tests_units', 'total_vaccinations',\n",
            "       'people_vaccinated', 'people_fully_vaccinated', 'total_boosters',\n",
            "       'new_vaccinations', 'new_vaccinations_smoothed',\n",
            "       'total_vaccinations_per_hundred', 'people_vaccinated_per_hundred',\n",
            "       'people_fully_vaccinated_per_hundred', 'total_boosters_per_hundred',\n",
            "       'new_vaccinations_smoothed_per_million',\n",
            "       'new_people_vaccinated_smoothed',\n",
            "       'new_people_vaccinated_smoothed_per_hundred', 'stringency_index',\n",
            "       'population_density', 'median_age', 'aged_65_older', 'aged_70_older',\n",
            "       'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate',\n",
            "       'diabetes_prevalence', 'female_smokers', 'male_smokers',\n",
            "       'handwashing_facilities', 'hospital_beds_per_thousand',\n",
            "       'life_expectancy', 'human_development_index', 'population',\n",
            "       'excess_mortality_cumulative_absolute', 'excess_mortality_cumulative',\n",
            "       'excess_mortality', 'excess_mortality_cumulative_per_million'],\n",
            "      dtype='object')\n",
            "  iso_code continent     location        date  total_cases  new_cases  \\\n",
            "0      AFG      Asia  Afghanistan  2020-01-05          0.0        0.0   \n",
            "1      AFG      Asia  Afghanistan  2020-01-06          0.0        0.0   \n",
            "2      AFG      Asia  Afghanistan  2020-01-07          0.0        0.0   \n",
            "3      AFG      Asia  Afghanistan  2020-01-08          0.0        0.0   \n",
            "4      AFG      Asia  Afghanistan  2020-01-09          0.0        0.0   \n",
            "\n",
            "   new_cases_smoothed  total_deaths  new_deaths  new_deaths_smoothed  ...  \\\n",
            "0                 NaN           0.0         0.0                  NaN  ...   \n",
            "1                 NaN           0.0         0.0                  NaN  ...   \n",
            "2                 NaN           0.0         0.0                  NaN  ...   \n",
            "3                 NaN           0.0         0.0                  NaN  ...   \n",
            "4                 NaN           0.0         0.0                  NaN  ...   \n",
            "\n",
            "   male_smokers  handwashing_facilities  hospital_beds_per_thousand  \\\n",
            "0           NaN                  37.746                         0.5   \n",
            "1           NaN                  37.746                         0.5   \n",
            "2           NaN                  37.746                         0.5   \n",
            "3           NaN                  37.746                         0.5   \n",
            "4           NaN                  37.746                         0.5   \n",
            "\n",
            "   life_expectancy  human_development_index  population  \\\n",
            "0            64.83                    0.511    41128772   \n",
            "1            64.83                    0.511    41128772   \n",
            "2            64.83                    0.511    41128772   \n",
            "3            64.83                    0.511    41128772   \n",
            "4            64.83                    0.511    41128772   \n",
            "\n",
            "   excess_mortality_cumulative_absolute  excess_mortality_cumulative  \\\n",
            "0                                   NaN                          NaN   \n",
            "1                                   NaN                          NaN   \n",
            "2                                   NaN                          NaN   \n",
            "3                                   NaN                          NaN   \n",
            "4                                   NaN                          NaN   \n",
            "\n",
            "   excess_mortality  excess_mortality_cumulative_per_million  \n",
            "0               NaN                                      NaN  \n",
            "1               NaN                                      NaN  \n",
            "2               NaN                                      NaN  \n",
            "3               NaN                                      NaN  \n",
            "4               NaN                                      NaN  \n",
            "\n",
            "[5 rows x 67 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Considera solo righe valide (dove il continente è definito)\n",
        "df_continent = df[df['continent'].notna()]\n",
        "\n",
        "# Raggruppa per continente e somma i casi totali\n",
        "continent_cases = df_continent.groupby('continent')['total_cases'].max()\n",
        "print(continent_cases)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GRwC881UuCqO",
        "outputId": "590293be-0b41-428a-8e23-e747af6dafdb"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "continent\n",
            "Africa             4072765.0\n",
            "Asia              99373219.0\n",
            "Europe            38997490.0\n",
            "North America    103436829.0\n",
            "Oceania           11861161.0\n",
            "South America     37511921.0\n",
            "Name: total_cases, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Somma totale dei casi nel mondo\n",
        "total_world_cases = df['total_cases'].max()\n",
        "\n",
        "# Calcola la percentuale per ciascun continente\n",
        "continent_cases_percentage = (continent_cases / total_world_cases) * 100\n",
        "\n",
        "# Unisci i dati in un unico DataFrame\n",
        "result = pd.DataFrame({\n",
        "    'Totale Casi': continent_cases,\n",
        "    'Percentuale (%)': continent_cases_percentage\n",
        "})\n",
        "print(result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wa9BNJfZuFuA",
        "outputId": "c0f1ebd5-0c60-4152-f4da-fa9857ed3c1d"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               Totale Casi  Percentuale (%)\n",
            "continent                                  \n",
            "Africa           4072765.0         0.524931\n",
            "Asia            99373219.0        12.808026\n",
            "Europe          38997490.0         5.026313\n",
            "North America  103436829.0        13.331777\n",
            "Oceania         11861161.0         1.528763\n",
            "South America   37511921.0         4.834840\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Carica il dataset\n",
        "df = pd.read_csv(\"owid-covid-data.csv\")\n",
        "\n",
        "# Filtra i dati per l'Italia nel 2022\n",
        "italy_data = df[(df['location'] == 'Italy') & (df['date'].str.startswith('2022'))]\n",
        "\n",
        "# Converti la colonna \"date\" in formato datetime\n",
        "italy_data['date'] = pd.to_datetime(italy_data['date'])\n",
        "\n",
        "# Verifica i dati filtrati\n",
        "print(italy_data.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "StRszSZtuPY2",
        "outputId": "ef0c6a1d-de2c-47ef-9878-481cb32971ad"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       iso_code continent location       date  total_cases  new_cases  \\\n",
            "186002      ITA    Europe    Italy 2022-01-01    5622431.0        0.0   \n",
            "186003      ITA    Europe    Italy 2022-01-02    6267035.0   644604.0   \n",
            "186004      ITA    Europe    Italy 2022-01-03    6267035.0        0.0   \n",
            "186005      ITA    Europe    Italy 2022-01-04    6267035.0        0.0   \n",
            "186006      ITA    Europe    Italy 2022-01-05    6267035.0        0.0   \n",
            "\n",
            "        new_cases_smoothed  total_deaths  new_deaths  new_deaths_smoothed  \\\n",
            "186002           36797.000      136530.0         0.0              140.857   \n",
            "186003           92086.286      137513.0       983.0              140.429   \n",
            "186004           92086.286      137513.0         0.0              140.429   \n",
            "186005           92086.286      137513.0         0.0              140.429   \n",
            "186006           92086.286      137513.0         0.0              140.429   \n",
            "\n",
            "        ...  male_smokers  handwashing_facilities  hospital_beds_per_thousand  \\\n",
            "186002  ...          27.8                     NaN                        3.18   \n",
            "186003  ...          27.8                     NaN                        3.18   \n",
            "186004  ...          27.8                     NaN                        3.18   \n",
            "186005  ...          27.8                     NaN                        3.18   \n",
            "186006  ...          27.8                     NaN                        3.18   \n",
            "\n",
            "        life_expectancy  human_development_index  population  \\\n",
            "186002            83.51                    0.892    59037472   \n",
            "186003            83.51                    0.892    59037472   \n",
            "186004            83.51                    0.892    59037472   \n",
            "186005            83.51                    0.892    59037472   \n",
            "186006            83.51                    0.892    59037472   \n",
            "\n",
            "        excess_mortality_cumulative_absolute  excess_mortality_cumulative  \\\n",
            "186002                                   NaN                          NaN   \n",
            "186003                              168226.3                        12.99   \n",
            "186004                                   NaN                          NaN   \n",
            "186005                                   NaN                          NaN   \n",
            "186006                                   NaN                          NaN   \n",
            "\n",
            "        excess_mortality  excess_mortality_cumulative_per_million  \n",
            "186002               NaN                                      NaN  \n",
            "186003              8.06                                2849.4834  \n",
            "186004               NaN                                      NaN  \n",
            "186005               NaN                                      NaN  \n",
            "186006               NaN                                      NaN  \n",
            "\n",
            "[5 rows x 67 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-20-bb939d9ff528>:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  italy_data['date'] = pd.to_datetime(italy_data['date'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Grafico dei casi totali nel 2022\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(italy_data['date'], italy_data['total_cases'], label='Casi Totali', color='blue')\n",
        "plt.title(\"Evoluzione dei Casi Totali in Italia (2022)\")\n",
        "plt.xlabel(\"Data\")\n",
        "plt.ylabel(\"Casi Totali\")\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "JYMtW3NwuTLZ",
        "outputId": "040de38d-716e-4e7d-bb82-8bece9fb616b"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtra i dati con misurazioni valide per \"new_cases\"\n",
        "weekly_cases = italy_data[italy_data['new_cases'].notna()]\n",
        "\n",
        "# Grafico dei nuovi casi rispetto alla data\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.bar(weekly_cases['date'], weekly_cases['new_cases'], label='Nuovi Casi', color='orange')\n",
        "plt.title(\"Nuovi Casi in Italia (2022)\")\n",
        "plt.xlabel(\"Data\")\n",
        "plt.ylabel(\"Nuovi Casi\")\n",
        "plt.grid(axis='y')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "id": "MhPjhn3cuWDi",
        "outputId": "d011c4ea-620e-40a6-be2e-0f9d010cf350"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Carica il dataset\n",
        "df = pd.read_csv(\"owid-covid-data.csv\")\n",
        "\n",
        "# Filtra per le nazioni di interesse\n",
        "nations = ['Italy', 'Germany', 'France']\n",
        "filtered_data = df[(df['location'].isin(nations)) &\n",
        "                   (df['date'] >= '2022-05-01') &\n",
        "                   (df['date'] <= '2023-04-30')]\n",
        "\n",
        "# Filtra per valori non nulli nella colonna \"icu_patients\"\n",
        "filtered_data = filtered_data[filtered_data['icu_patients'].notna()]\n"
      ],
      "metadata": {
        "id": "XDOBjpTJuf9I"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "# Boxplot per confrontare i pazienti in terapia intensiva tra le nazioni\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.boxplot(data=filtered_data, x='location', y='icu_patients', palette='Set2')\n",
        "\n",
        "# Titoli e etichette\n",
        "plt.title(\"Confronto dei pazienti in terapia intensiva (ICU) \\nItalia, Germania, Francia (Maggio 2022 - Aprile 2023)\")\n",
        "plt.xlabel(\"Nazione\")\n",
        "plt.ylabel(\"Numero di pazienti in terapia intensiva\")\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 651
        },
        "id": "eb9c0nBlujNT",
        "outputId": "61d345c0-bfbd-452a-f44f-d07bc48165fb"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-24-c8d3dceedc23>:5: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(data=filtered_data, x='location', y='icu_patients', palette='Set2')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\"Dal boxplot, notiamo che la Germania ha avuto una distribuzione di pazienti in terapia intensiva significativamente più alta rispetto all'Italia e alla Francia, con una mediana maggiore. La Francia ha una distribuzione più ristretta e valori più bassi rispetto alle altre due nazioni. Sono visibili alcuni outlier, che indicano picchi di ricoveri in terapia intensiva in specifici momenti.\""
      ],
      "metadata": {
        "id": "XmQF8qavuonw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Carica il dataset\n",
        "df = pd.read_csv(\"owid-covid-data.csv\")\n",
        "\n",
        "# Filtra per le nazioni di interesse e per l'anno 2023\n",
        "nations = ['Italy', 'Germany', 'France', 'Spain']\n",
        "filtered_data = df[(df['location'].isin(nations)) &\n",
        "                   (df['date'] >= '2023-01-01') &\n",
        "                   (df['date'] <= '2023-12-31')]\n",
        "\n",
        "# Controlla le colonne disponibili\n",
        "print(filtered_data.columns)\n",
        "\n",
        "# Verifica se esiste la colonna \"hosp_patients\" (pazienti ospedalizzati)\n",
        "filtered_data = filtered_data[filtered_data['hosp_patients'].notna()]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ycfbRzVOvGO3",
        "outputId": "c7ce19dc-5004-49e9-df86-007f51f0b3a5"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['iso_code', 'continent', 'location', 'date', 'total_cases', 'new_cases',\n",
            "       'new_cases_smoothed', 'total_deaths', 'new_deaths',\n",
            "       'new_deaths_smoothed', 'total_cases_per_million',\n",
            "       'new_cases_per_million', 'new_cases_smoothed_per_million',\n",
            "       'total_deaths_per_million', 'new_deaths_per_million',\n",
            "       'new_deaths_smoothed_per_million', 'reproduction_rate', 'icu_patients',\n",
            "       'icu_patients_per_million', 'hosp_patients',\n",
            "       'hosp_patients_per_million', 'weekly_icu_admissions',\n",
            "       'weekly_icu_admissions_per_million', 'weekly_hosp_admissions',\n",
            "       'weekly_hosp_admissions_per_million', 'total_tests', 'new_tests',\n",
            "       'total_tests_per_thousand', 'new_tests_per_thousand',\n",
            "       'new_tests_smoothed', 'new_tests_smoothed_per_thousand',\n",
            "       'positive_rate', 'tests_per_case', 'tests_units', 'total_vaccinations',\n",
            "       'people_vaccinated', 'people_fully_vaccinated', 'total_boosters',\n",
            "       'new_vaccinations', 'new_vaccinations_smoothed',\n",
            "       'total_vaccinations_per_hundred', 'people_vaccinated_per_hundred',\n",
            "       'people_fully_vaccinated_per_hundred', 'total_boosters_per_hundred',\n",
            "       'new_vaccinations_smoothed_per_million',\n",
            "       'new_people_vaccinated_smoothed',\n",
            "       'new_people_vaccinated_smoothed_per_hundred', 'stringency_index',\n",
            "       'population_density', 'median_age', 'aged_65_older', 'aged_70_older',\n",
            "       'gdp_per_capita', 'extreme_poverty', 'cardiovasc_death_rate',\n",
            "       'diabetes_prevalence', 'female_smokers', 'male_smokers',\n",
            "       'handwashing_facilities', 'hospital_beds_per_thousand',\n",
            "       'life_expectancy', 'human_development_index', 'population',\n",
            "       'excess_mortality_cumulative_absolute', 'excess_mortality_cumulative',\n",
            "       'excess_mortality', 'excess_mortality_cumulative_per_million'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Raggruppa per nazione e somma i pazienti ospedalizzati\n",
        "hospitalized_sum = filtered_data.groupby('location')['hosp_patients'].sum()\n",
        "\n",
        "# Mostra il risultato\n",
        "print(hospitalized_sum)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zCxuBaH7vM13",
        "outputId": "09744f6d-7a67-4ef9-ad21-26d3e3fb9c00"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "location\n",
            "France    1382574.0\n",
            "Italy     1175272.0\n",
            "Spain      354602.0\n",
            "Name: hosp_patients, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Conta i valori nulli nella colonna \"hosp_patients\" per nazione\n",
        "null_counts = df[df['location'].isin(nations) & (df['date'] >= '2023-01-01')]['hosp_patients'].isnull().sum()\n",
        "\n",
        "print(\"Numero di valori nulli per nazione:\", null_counts)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HqHVEQnQvPcJ",
        "outputId": "2b89108a-eae2-41ac-d766-859f099f4397"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numero di valori nulli per nazione: 1494\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dai dati analizzati, abbiamo riscontrato che alcune nazioni hanno valori nulli nella colonna hosp_patients. È possibile gestire questi dati utilizzando la mediana per ciascuna nazione se i dati mancanti sono pochi. Tuttavia, se i dati nulli sono numerosi o distribuiti in modo irregolare, questa sostituzione potrebbe introdurre bias, e quindi sarebbe meglio rimuovere tali righe."
      ],
      "metadata": {
        "id": "Nfy23F7evY44"
      }
    }
  ]
}